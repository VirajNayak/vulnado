# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow helps you trigger a SonarQube analysis of your code and populates
# GitHub Code Scanning alerts with the vulnerabilities found.
# (this feature is available starting from SonarQube 9.7, Developer Edition and above)

# 1. Make sure you add a valid GitHub configuration to your SonarQube (Administration > DevOps platforms > GitHub)

# 2. Import your project on SonarQube
#     * Add your repository as a new project by clicking "Create project" from your homepage.
#
# 3. Select GitHub Actions as your CI and follow the tutorial
#     * a. Generate a new token and add it to your GitHub repository's secrets using the name SONAR_TOKEN
#          (On SonarQube, click on your avatar on top-right > My account > Security or ask your administrator)
#
#     * b. Copy/paste your SonarQube host URL to your GitHub repository's secrets using the name SONAR_HOST_URL
#
#     * c. Copy/paste the project Key into the args parameter below
#          (You'll find this information in SonarQube by following the tutorial or by clicking on Project Information at the top-right of your project's homepage)

# Feel free to take a look at our documentation (https://docs.sonarqube.org/latest/analysis/github-integration/)
# or reach out to our community forum if you need some help (https://community.sonarsource.com/c/sq/10)

name: SonarQube analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
    contents: read
    pull-requests: read # allows SonarQube to decorate PRs with analysis results

jobs:
  sonarqube:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        id: code_checkout

      - name: Start SonarQube Server
        run: |
          docker run -d --name qubesonar -p 9000:9000 sonarqube:latest
      - name: Get Container IP
        id: get_container_ip
        run: |
          CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' qubesonar)
          echo "::set-output name=container_ip::$CONTAINER_IP"
          echo "Container IP: $CONTAINER_IP"
          ABC=${GITHUB_REPOSITORY#*/}
          echo $ABC
      
      - name: Wait for SonarQube Server to Start
        run: |
          timeout 300 bash -c 'until wget http://${{ steps.get_container_ip.outputs.container_ip }}:9000/index; do sleep 1; done'
          sleep 75
          echo "Done"

      - name: Waiting for the Scans to Complete
        run: |
          timeout 500 bash -c 'until wget http://${{ steps.get_container_ip.outputs.container_ip }}:9000/dashboard?id=${GITHUB_REPOSITORY#*/}; do sleep 1; done'
          sleep 75
          echo "Done"
      - name: Generating Local Sonar Token
        id: get_token
        run: |
          gen_token_res=$(curl -u admin:admin -X POST "http://${{ steps.get_container_ip.outputs.container_ip }}:9000/api/user_tokens/generate" -d "name=sonar_token&login=admin&type=GLOBAL_ANALYSIS_TOKEN")
          token=$(echo $gen_token_res | jq -r '.token')
          echo "::set-output name=sonar_token::$token"

      - name: Download and Setup sonar-scanner-cli
        run: |
          mvn clean install
          mvn sonar:sonar -Dsonar.token=${{ steps.get_token.outputs.sonar_token }}
      
      - name: Fetching the WEB API to Export findings to JSON
        run: |
          curl -u ${{ steps.get_token.outputs.sonar_token }} -o result.json "http://${{ steps.get_container_ip.outputs.container_ip }}:9000/api/issues/search?project=${GITHUB_REPOSITORY#*/}"
          echo "Result File Generated"
          mv result.json result.sarif
          
     # - name: Integrating JIRA and using JSON data to create tickets
     #   run: |
     #     security_data=$(jq '.issues | map(select(.type == "Vulnerability"))' result.json)
     #     echo $security_data
  
     # - name: Upload scan reports
     #   uses: actions/upload-artifact@v3
     #   with:
     #     path: result.sarif
